---
// src/layouts/MainLayout.astro
import '../styles/global.css';
import ServicePanel from '../components/ui/ServicePanel.svelte';
import Header from '../components/layout/Header.svelte';
import Footer from '../components/layout/Footer.astro';
import Logo from '../components/ui/Logo.astro';
import CookieConsent from '../components/ui/CookieConsent.svelte';

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

const isHomepage = Astro.url.pathname === '/';
const siteTitle = title || 'Koordynuj Zdrowie';
const siteDescription = description || 'Zarządzanie medycyną. Zredukowane do perfekcji.';
const themeColor = '#00A9E0';
---

<!doctype html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={siteDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,wght@0,400;0,500;0,600;0,700;0,800;1,400&display=swap" rel="stylesheet">

    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="theme-color" content={themeColor} />

     <style is:global>
      /* Zapobiega „przykryciu” kotwic przez sticky header (dopasuj do realnej wysokości nagłówka) */
      :root { --header-offset: 88px; }
      [id] { scroll-margin-top: var(--header-offset); }
      html { scroll-behavior: auto; } /* natychmiastowe przejście do #kotwicy przy nawigacji między stronami */
    </style>

    <script is:inline>
      // 1) Pozwól przeglądarce przywracać scroll przy wstecz/dalej (najpewniejsze)
      if ('scrollRestoration' in history) {
        history.scrollRestoration = 'auto';
      }

      // 2) Smooth scroll TYLKO dla kotwic na tej samej stronie
      document.addEventListener('DOMContentLoaded', () => {
        const samePageAnchors = document.querySelectorAll('a[href^="#"]');

        samePageAnchors.forEach((link) => {
          link.addEventListener('click', (e) => {
            const a = /** @type {HTMLAnchorElement} */ (e.currentTarget);
            const href = a.getAttribute('href') || '';
            if (href === '#') {
              e.preventDefault();
              window.scrollTo({ top: 0, behavior: 'smooth' });
              return;
            }
            const id = href.slice(1);
            const el = id ? document.getElementById(id) : null;
            if (!el) return;

            // smooth scroll tylko, jeśli zostajemy na tej samej stronie
            // (czyli gdy href zaczyna się od # i NIE zmienia pathname)
            e.preventDefault();
            el.scrollIntoView({ behavior: 'smooth', block: 'start' });

            // delikatnie aktualizujemy hash bez przeładowania (tylko na tej samej stronie)
            const url = new URL(window.location.href);
            url.hash = '#' + id;
            history.replaceState(history.state, '', url);
          });
        });
      });
    </script>
  </head>

  <body class="bg-background-light text-text-primary font-sans antialiased">
    <Header client:load>
      <div slot="logo">
        <!-- pełna nawigacja do strony głównej – pozwól przeglądarce zrobić resztę -->
        <a href="/" class="flex-shrink-0">
          <Logo isHomepage={Astro.url.pathname === '/'} />
        </a>
      </div>
    </Header>

    <main id="top">
      <slot />
    </main>

    <Footer />

    <ServicePanel client:idle />

    <!-- Cookie banner na każdej podstronie obsługiwanej przez layout -->
    <CookieConsent client:idle />

    <!-- Zapisywanie pozycji scroll + smooth anchors (defensywnie typowane, bez TS błędów) -->
<script is:inline>
  /** @type {number | null} */
  let scrollSaveTimeout = null;

  function saveScrollPosition() {
    if (scrollSaveTimeout !== null) window.clearTimeout(scrollSaveTimeout);
    scrollSaveTimeout = window.setTimeout(() => {
      const y = window.scrollY;
      const path = window.location.pathname;
      history.replaceState({ ...(history.state || {}), scrollY: y }, '');
      sessionStorage.setItem('scroll_' + path, String(y));
    }, 100);
  }

  window.addEventListener('scroll', saveScrollPosition, { passive: true });
  window.addEventListener('beforeunload', saveScrollPosition);

  document.addEventListener('DOMContentLoaded', () => {
    // ⤵️ NOWE: zapisz scroll tuż przed nawigacją do innej podstrony (np. /blog)
    document.addEventListener('click', (e) => {
      const a = /** @type {HTMLAnchorElement | null} */ (e.target instanceof Element
        ? e.target.closest('a[href]')
        : null);
      if (!a) return;

      const href = a.getAttribute('href') || '';
      // pomijamy kotwice /# i linki zewnętrzne, nowe karty, z modyfikatorami itp.
      const isSameOrigin = href.startsWith('/') || href.startsWith(window.location.origin);
      const isHashOnly  = href.startsWith('#');
      const newTab      = a.target === '_blank';
      const modified    = e.ctrlKey || e.metaKey || e.shiftKey || e.altKey;

      if (!isSameOrigin || isHashOnly || newTab || modified) return;

      // zapis tuż przed przejściem — gwarantuje przywrócenie po "Back"
      const y = window.scrollY;
      const path = window.location.pathname;
      history.replaceState({ ...(history.state || {}), scrollY: y }, '');
      sessionStorage.setItem('scroll_' + path, String(y));
      // nic nie blokujemy — normalna nawigacja leci dalej
    }, { capture: true });

    // (reszta Twojej obsługi anchorów do sekcji itd.)
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        const current = /** @type {HTMLAnchorElement | null} */ (e.currentTarget);
        if (!current) return;

        const href = current.getAttribute('href');
        if (!href) return;

        if (href === '#') {
          e.preventDefault();
          window.scrollTo({ top: 0, behavior: 'smooth' });
          return;
        }

        const id = href.slice(1);
        const el = document.getElementById(id);
        if (el) {
          e.preventDefault();
          el.scrollIntoView({ behavior: 'smooth', block: 'start' });
          if (window.location.pathname === '/') {
            history.replaceState({ ...(history.state || {}) }, '', href);
          }
        }
      });
    });

    if (window.location.hash) {
      const el = document.getElementById(window.location.hash.slice(1));
      if (el) setTimeout(() => el.scrollIntoView({ behavior: 'smooth', block: 'start' }), 100);
    }
  });
</script>
  </body>
</html>