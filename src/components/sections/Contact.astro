---
import AnimateOnScroll from '../ui/AnimateOnScroll.astro';
import ContactForm from '../ui/ContactForm.svelte';
import { getGlobalSettings, getContactForm } from '../../lib/strapi';
import { fixOrphans } from '../../lib/typography';

const settings = await getGlobalSettings();
const formSettings = await getContactForm();

const fallbackData = {
    contactPhone: "+48 535 604 904",
    contactEmail: "kontakt@koordynujzdrowie.pl",
    sectionTitle: "Zacznijmy koordynować Twój sukces.",
    sectionDescription: "Wypełnij formularz, a nasz strateg skontaktuje się z Tobą w ciągu **24h**, aby umówić bezpłatną konsultację.",
    successMessage: "Dziękujemy za zgłoszenie! Skontaktujemy się z Tobą w ciągu 24h."
};

const contactData = settings || fallbackData;
const formData = formSettings || fallbackData;

// Ustawiamy docelowy email - jeśli jest w globalnych ustawieniach, użyj go, w przeciwnym razie użyj zapasowego
const recipientEmail = settings?.contactEmail || fallbackData.contactEmail;
---

<section id="kontakt" class="py-20 sm:py-32 bg-background-muted relative overflow-hidden">
    <AnimateOnScroll>
        <div class="relative z-10 max-w-4xl mx-auto px-4">
            <div class="text-center mb-12">
                <h2 class="text-4xl md:text-5xl font-extrabold text-text-primary mb-4 tracking-tighter" set:html={fixOrphans(formData.sectionTitle)}></h2>
                <div class="section-subtitle strapi-content" set:html={fixOrphans(formData.sectionDescription)}></div>
            </div>

            <div class="max-w-2xl mx-auto">
                <ContactForm 
                    client:load 
                    recipientEmail={recipientEmail}
                    successMessageHTML={formData.successMessage}
                />
            </div>

            <div class="text-center mt-16">
                </div>
        </div>
                    <div class="text-center mt-16">
                <p class="text-text-muted mb-6">Lub skontaktuj się z nami bezpośrednio:</p>
                <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-8">
                    
                    {/* KROK 3: Używamy dynamicznych danych dla telefonu */}
                    {contactData.contactPhone && (
                        <a href={`tel:${contactData.contactPhone.replace(/\s/g, '')}`} class="contact-link flex items-center text-brand-blue hover:text-brand-blue/80 transition-all duration-300 group">
                            <svg class="w-5 h-5 mr-2 transition-transform group-hover:scale-110" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                            </svg>
                            {contactData.contactPhone}
                        </a>
                    )}

                    {/* KROK 4: Używamy dynamicznych danych dla emaila */}
                    {contactData.contactEmail && (
                        <a href={`mailto:${contactData.contactEmail}`} class="contact-link flex items-center text-brand-blue hover:text-brand-blue/80 transition-all duration-300 group">
                            <svg class="w-5 h-5 mr-2 transition-transform group-hover:scale-110" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                            </svg>
                            {contactData.contactEmail}
                        </a>
                    )}
                </div>
            </div>
    </AnimateOnScroll>
</section>

<style>
    /* Usunięto style dla [data-reveal] */
    .contact-link {
        padding: 0.75rem 1rem;
        border-radius: 0.75rem;
        position: relative;
    }
    .contact-link::before {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: 0.75rem;
        background: linear-gradient(135deg, rgba(0, 169, 224, 0.05), rgba(0, 169, 224, 0.02));
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .contact-link:hover::before {
        opacity: 1;
    }
    .contact-link:hover {
        transform: translateY(-1px);
    }
    .contact-bg-pattern {
        background-image: 
            radial-gradient(circle at 30% 20%, rgba(0, 169, 224, 0.10) 1px, transparent 1px),
            radial-gradient(circle at 70% 80%, rgba(0, 169, 224, 0.08) 1px, transparent 1px),
            radial-gradient(circle at 20% 80%, rgba(0, 169, 224, 0.12) 1px, transparent 1px);
        background-size: 160px 160px, 240px 240px, 200px 200px;
        animation: patternDrift 40s linear infinite;
    }
    .section-subtitle :global(strong) {
    color: rgb(var(--brand-blue));
  }
    
    @keyframes convergence {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-5px); }
    }
    @keyframes pulse-center {
        0%, 100% { opacity: 0.4; transform: scale(1); }
        50% { opacity: 0.8; transform: scale(1.5); }
    }
    .animate-convergence { animation: convergence 10s ease-in-out infinite; }
    .animate-pulse-center { animation: pulse-center 3s ease-in-out infinite; }
    @keyframes patternDrift {
        0% { background-position: 0% 0%, 0% 0%, 0% 0%; }
        100% { background-position: 100% 100%, -100% 100%, 50% -100%; }
    }
    @media (prefers-reduced-motion: reduce) {
        .contact-link, .contact-bg-pattern, .animate-convergence, .animate-pulse-center {
            animation: none !important;
            transition: none !important;
        }
    }
    @media (max-width: 768px) {
        .contact-bg-pattern { display: none; }
        .contact-link { padding: 0.5rem 0.75rem; }
    }
</style>